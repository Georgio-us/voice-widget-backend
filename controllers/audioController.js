import { File } from 'node:buffer';
globalThis.File = File;
import { OpenAI } from 'openai';

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });
const sessions = new Map();

const cleanupOldSessions = () => {
  const oneHourAgo = Date.now() - 60 * 60 * 1000;
  for (const [sessionId, session] of sessions.entries()) {
    if (session.lastActivity < oneHourAgo) {
      sessions.delete(sessionId);
    }
  }
};
setInterval(cleanupOldSessions, 60 * 60 * 1000);

const generateSessionId = () => `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;

const getOrCreateSession = (sessionId) => {
  if (!sessionId) sessionId = generateSessionId();
  if (!sessions.has(sessionId)) {
    sessions.set(sessionId, {
      sessionId,
      messages: [],
      createdAt: Date.now(),
      lastActivity: Date.now(),
      // üÜï –†–ê–°–®–ò–†–ï–ù–ù–ê–Ø –°–¢–†–£–ö–¢–£–†–ê INSIGHTS (9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
      insights: {
        // –ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (33.3%)
        name: null,           // 10%
        operation: null,      // 12%  
        budget: null,         // 11%
        
        // –ë–ª–æ–∫ 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (33.3%)
        type: null,           // 11%
        location: null,       // 11%
        rooms: null,          // 11%
        
        // –ë–ª–æ–∫ 3: –î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (33.3%)
        area: null,           // 11%
        details: null,        // 11% (–¥–µ—Ç–∞–ª–∏ –ª–æ–∫–∞—Ü–∏–∏: –≤–æ–∑–ª–µ –ø–∞—Ä–∫–∞, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É–ª–∏—Ü)
        preferences: null,    // 11%
        
        progress: 0
      }
    });
  }
  return sessions.get(sessionId);
};

const addMessageToSession = (sessionId, role, content) => {
  const session = sessions.get(sessionId);
  if (session) {
    session.messages.push({ role, content, timestamp: Date.now() });
    session.lastActivity = Date.now();
  }
};

// üß† –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è insights (9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
const updateInsights = (sessionId, newMessage) => {
  const session = sessions.get(sessionId);
  if (!session) return;

  const { insights } = session;
  const text = newMessage.toLowerCase();
  
  console.log(`üß† –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è insights: "${newMessage}"`);

  // 1. üë§ –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–º–µ–Ω–∏ (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã)
  if (!insights.name) {
    const namePatterns = [
      /–º–µ–Ω—è –∑–æ–≤—É—Ç\s+([–∞-—è—ë]+)/i,           // "–º–µ–Ω—è –∑–æ–≤—É—Ç –ì–µ–æ—Ä–≥–∏–π"
      /—è\s+([–∞-—è—ë]+)/i,                     // "—è –ì–µ–æ—Ä–≥–∏–π" 
      /–∏–º—è\s+([–∞-—è—ë]+)/i,                   // "–∏–º—è –ì–µ–æ—Ä–≥–∏–π"
      /–∑–æ–≤–∏—Ç–µ\s+–º–µ–Ω—è\s+([–∞-—è—ë]+)/i,         // "–∑–æ–≤–∏—Ç–µ –º–µ–Ω—è –ì–µ–æ—Ä–≥–∏–π"
      /—ç—Ç–æ\s+([–∞-—è—ë]+)/i,                   // "—ç—Ç–æ –ì–µ–æ—Ä–≥–∏–π"
      /–º–µ–Ω—è\s+(\w+)/i                       // "–º–µ–Ω—è –ì–µ–æ—Ä–≥–∏–π"
    ];

    for (const pattern of namePatterns) {
      const match = text.match(pattern);
      if (match && match[1].length > 2) { // –∏–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 2 —Å–∏–º–≤–æ–ª–æ–≤
        insights.name = match[1].charAt(0).toUpperCase() + match[1].slice(1);
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∏–º—è: ${insights.name}`);
        break;
      }
    }
  }

  // 2. üè† –¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (—É—á–∏—Ç—ã–≤–∞–µ–º —Å–∫–ª–æ–Ω–µ–Ω–∏—è)
  if (!insights.type) {
    const propertyPatterns = [
      /(–∫–≤–∞—Ä—Ç–∏—Ä[—É—ã–∞–µ–æ–π]|–∫–≤–∞—Ä—Ç–∏—Ä)/i,        // –∫–≤–∞—Ä—Ç–∏—Ä—É, –∫–≤–∞—Ä—Ç–∏—Ä—ã, –∫–≤–∞—Ä—Ç–∏—Ä–∞, –∫–≤–∞—Ä—Ç–∏—Ä–µ
      /(–¥–æ–º[–∞–µ—ã–æ–π]?|–¥–æ–º)/i,                // –¥–æ–º, –¥–æ–º–∞, –¥–æ–º–µ
      /(–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç[—ã–∞–µ–æ–π–≤]*)/i,            // –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç
      /(–∫–æ–º–Ω–∞—Ç[—É—ã–∞–µ–æ–π]|–∫–æ–º–Ω–∞—Ç)/i,          // –∫–æ–º–Ω–∞—Ç—É, –∫–æ–º–Ω–∞—Ç—ã, –∫–æ–º–Ω–∞—Ç–∞
      /(—Å—Ç—É–¥–∏[—é—è–µ–∏–π]*)/i,                  // —Å—Ç—É–¥–∏—è, —Å—Ç—É–¥–∏—é
      /(–ø–µ–Ω—Ç—Ö–∞—É—Å[–∞–µ—ã]*)/i,                 // –ø–µ–Ω—Ç—Ö–∞—É—Å, –ø–µ–Ω—Ç—Ö–∞—É—Å–∞
      /(—Ç–∞—É–Ω—Ö–∞—É—Å[–∞–µ—ã]*)/i                  // —Ç–∞—É–Ω—Ö–∞—É—Å, —Ç–∞—É–Ω—Ö–∞—É—Å–∞
    ];

    for (const pattern of propertyPatterns) {
      const match = text.match(pattern);
      if (match) {
        if (match[1].startsWith('–∫–≤–∞—Ä—Ç–∏—Ä')) insights.type = '–∫–≤–∞—Ä—Ç–∏—Ä–∞';
        else if (match[1].startsWith('–¥–æ–º')) insights.type = '–¥–æ–º'; 
        else if (match[1].startsWith('–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç')) insights.type = '–∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã';
        else if (match[1].startsWith('–∫–æ–º–Ω–∞—Ç')) insights.type = '–∫–æ–º–Ω–∞—Ç–∞';
        else if (match[1].startsWith('—Å—Ç—É–¥–∏')) insights.type = '—Å—Ç—É–¥–∏—è';
        else if (match[1].startsWith('–ø–µ–Ω—Ç—Ö–∞—É—Å')) insights.type = '–ø–µ–Ω—Ç—Ö–∞—É—Å';
        else if (match[1].startsWith('—Ç–∞—É–Ω—Ö–∞—É—Å')) insights.type = '—Ç–∞—É–Ω—Ö–∞—É—Å';
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω —Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: ${insights.type}`);
        break;
      }
    }
  }

  // 3. üí∞ –¢–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ–∫—É–ø–∫–∞/–∞—Ä–µ–Ω–¥–∞)
  if (!insights.operation) {
    const operationPatterns = [
      // –ü–æ–∫—É–ø–∫–∞
      /(–∫—É–ø–∏—Ç—å|–ø–æ–∫—É–ø[–∫–∞–µ–∏]|–∫—É–ø–ª—é|–ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏|–ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ)/i,
      /(–ø–æ–∫—É–ø–∫[–∞–µ—É–∏]|–≤\s*–ø–æ–∫—É–ø–∫—É)/i,
      /(–∫—É–ø–∏–ª|—Ö–æ—á—É\s+–∫—É–ø–∏—Ç—å|–ø–ª–∞–Ω–∏—Ä—É—é\s+–∫—É–ø–∏—Ç—å)/i,
      /(–∏–Ω–≤–µ—Å—Ç–∏—Ü|–∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å)/i,
      
      // –ê—Ä–µ–Ω–¥–∞  
      /(—Å–Ω—è—Ç—å|–∞—Ä–µ–Ω–¥[–∞–µ—É–∏–æ]*|–∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å|—Å–¥–∞—Ç—å)/i,
      /(–≤\s*–∞—Ä–µ–Ω–¥—É|–Ω–∞\s*–∞—Ä–µ–Ω–¥—É|–ø–æ–¥\s*–∞—Ä–µ–Ω–¥—É)/i,
      /(—Å—ä–µ–º|—Å–Ω–∏–º–∞—Ç—å|–Ω–∞–π–º)/i
    ];

    for (const pattern of operationPatterns) {
      const match = text.match(pattern);
      if (match) {
        const matched = match[1].toLowerCase();
        if (matched.includes('–∫—É–ø–∏') || matched.includes('–ø–æ–∫—É–ø') || matched.includes('–ø—Ä–∏–æ–±—Ä') || matched.includes('–∏–Ω–≤–µ—Å—Ç')) {
          insights.operation = '–ø–æ–∫—É–ø–∫–∞';
        } else if (matched.includes('—Å–Ω—è—Ç—å') || matched.includes('–∞—Ä–µ–Ω–¥') || matched.includes('—Å—ä–µ–º') || matched.includes('–Ω–∞–π–º')) {
          insights.operation = '–∞—Ä–µ–Ω–¥–∞';
        }
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—è: ${insights.operation}`);
        break;
      }
    }
  }

  // 4. üíµ –ë—é–¥–∂–µ—Ç (–±–æ–ª–µ–µ –≥–∏–±–∫–∏–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è —á–∏—Å–µ–ª)
  if (!insights.budget) {
    const budgetPatterns = [
      // –¢–æ—á–Ω—ã–µ —á–∏—Å–ª–∞: "300000 –µ–≤—Ä–æ", "300 —Ç—ã—Å—è—á –µ–≤—Ä–æ"
      /(\d+[\d\s]*)\s*(—Ç—ã—Å—è—á?|—Ç—ã—Å\.?)\s*(–µ–≤—Ä–æ|‚Ç¨|euro)/i,
      /(\d+[\d\s]*)\s*(–µ–≤—Ä–æ|‚Ç¨|euro)/i,
      
      // –î–∏–∞–ø–∞–∑–æ–Ω—ã: "–æ—Ç 200 –¥–æ 400 —Ç—ã—Å—è—á", "200-400–∫"
      /(–æ—Ç\s*)?(\d+)[\s-]*(\d+)?\s*(—Ç—ã—Å—è—á?|—Ç—ã—Å\.?|–∫)\s*(–µ–≤—Ä–æ|‚Ç¨|euro)?/i,
      
      // –û–∫–æ–ª–æ/–ø—Ä–∏–º–µ—Ä–Ω–æ: "–æ–∫–æ–ª–æ 300–∫", "–ø—Ä–∏–º–µ—Ä–Ω–æ 250 —Ç—ã—Å—è—á"
      /(–æ–∫–æ–ª–æ|–ø—Ä–∏–º–µ—Ä–Ω–æ|–≥–¥–µ-?—Ç–æ|–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–æ)\s*(\d+[\d\s]*)\s*(—Ç—ã—Å—è—á?|—Ç—ã—Å\.?|–∫)?\s*(–µ–≤—Ä–æ|‚Ç¨|euro)?/i,
      
      // –î–æ: "–¥–æ 500 —Ç—ã—Å—è—á"
      /(–¥–æ|–º–∞–∫—Å–∏–º—É–º|–Ω–µ\s*–±–æ–ª—å—à–µ)\s*(\d+[\d\s]*)\s*(—Ç—ã—Å—è—á?|—Ç—ã—Å\.?|–∫)\s*(–µ–≤—Ä–æ|‚Ç¨|euro)?/i
    ];

    for (const pattern of budgetPatterns) {
      const match = text.match(pattern);
      if (match) {
        let amount = '';
        let numberIndex = 1;
        
        // –ù–∞—Ö–æ–¥–∏–º –∏–Ω–¥–µ–∫—Å —Å —á–∏—Å–ª–æ–º
        for (let i = 1; i < match.length; i++) {
          if (match[i] && /\d/.test(match[i])) {
            numberIndex = i;
            break;
          }
        }
        
        let number = match[numberIndex];
        
        // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏–∑ —á–∏—Å–ª–∞
        if (number) {
          number = number.replace(/\s/g, '');
          
          // –ï—Å–ª–∏ –µ—Å—Ç—å "—Ç—ã—Å—è—á" - —É–º–Ω–æ–∂–∞–µ–º –Ω–∞ 1000
          if (match[0].includes('—Ç—ã—Å—è—á') || match[0].includes('—Ç—ã—Å') || match[0].includes('–∫')) {
            amount = `${number}000`;
          } else {
            amount = number;
          }
          
          insights.budget = `${amount} ‚Ç¨`;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω –±—é–¥–∂–µ—Ç: ${insights.budget}`);
          break;
        }
      }
    }
  }

  // 5. üìç –†–∞–π–æ–Ω/–ª–æ–∫–∞—Ü–∏—è (—Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Ä–∞–π–æ–Ω–æ–≤ –í–∞–ª–µ–Ω—Å–∏–∏)
  if (!insights.location) {
    const locationPatterns = [
      // –û—Å–Ω–æ–≤–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –í–∞–ª–µ–Ω—Å–∏–∏
      /(—Ü–µ–Ω—Ç—Ä[–∞–µ]?|–∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–π\s*—Ü–µ–Ω—Ç—Ä|—Å—Ç–∞—Ä—ã–π\s*–≥–æ—Ä–æ–¥)/i,
      /(—Ä—É—Å–∞—Ñ[–∞–µ—ã]?|russafa)/i,
      /(–∞–ª–∞–≤–µ—Å|alav√©s)/i,
      /(–∫–∞–±–∞–Ω—å—è–ª|cabanyal|–∫–∞–±–∞–Ω–∞–ª)/i,
      /(–±–µ–Ω–∏–º–∞–∫–ª–µ—Ç|benimaclet)/i,
      /(–ø–∞—Ç—Ä–∞–∏–∫—Å|patraix)/i,
      /(camins|–∫–∞–º–∏–Ω—Å)/i,
      /(–ø–æ–±–ª–µ–Ω–æ—É|poblats\s*del\s*sud)/i,
      /(—ç–∫—Å—Ç—Ä–∞–º—É—Ä—Å|extramurs)/i,
      /(–ø–ª–∞\s*–¥–µ–ª—å\s*—Ä–µ–∞–ª—å|pla\s*del\s*real)/i,
      /(–ª–∞\s*—Å–∞–π–¥–∏–∞|la\s*sa√Ødia)/i,
      /(–º–æ—Ä—Å–∫–æ–π|–ø–æ–±–µ—Ä–µ–∂—å–µ|—É\s*–º–æ—Ä—è|–ø–ª—è–∂)/i,
      
      // –û–±—â–∏–µ —É–∫–∞–∑–∞–Ω–∏—è
      /(—Ä–∞–π–æ–Ω[–µ–∞]?\s*(\w+))/i,
      /(–∑–æ–Ω[–∞–µ—É]\s*(\w+))/i,
      /(–Ω–µ–¥–∞–ª–µ–∫–æ\s*–æ—Ç\s*(\w+))/i
    ];

    for (const pattern of locationPatterns) {
      const match = text.match(pattern);
      if (match) {
        const location = match[1].toLowerCase();
        
        if (location.includes('—Ü–µ–Ω—Ç—Ä')) insights.location = '–¶–µ–Ω—Ç—Ä';
        else if (location.includes('—Ä—É—Å–∞—Ñ')) insights.location = '–†—É—Å–∞—Ñ–∞';
        else if (location.includes('–∞–ª–∞–≤–µ—Å')) insights.location = '–ê–ª–∞–≤–µ—Å';
        else if (location.includes('–∫–∞–±–∞–Ω—å—è–ª') || location.includes('–∫–∞–±–∞–Ω–∞–ª')) insights.location = '–ö–∞–±–∞–Ω—å—è–ª';
        else if (location.includes('–±–µ–Ω–∏–º–∞–∫–ª–µ—Ç')) insights.location = '–ë–µ–Ω–∏–º–∞–∫–ª–µ—Ç';
        else if (location.includes('–ø–∞—Ç—Ä–∞–∏–∫—Å')) insights.location = '–ü–∞—Ç—Ä–∞–∏–∫—Å';
        else if (location.includes('camins') || location.includes('–∫–∞–º–∏–Ω—Å')) insights.location = 'Camins al Grau';
        else if (location.includes('–ø–æ–±–ª–µ–Ω–æ—É')) insights.location = '–ü–æ–±–ª–µ–Ω–æ—É';
        else if (location.includes('—ç–∫—Å—Ç—Ä–∞–º—É—Ä—Å')) insights.location = '–≠–∫—Å—Ç—Ä–∞–º—É—Ä—Å';
        else if (location.includes('–º–æ—Ä—Å–∫–æ–π') || location.includes('–ø–ª—è–∂')) insights.location = '–£ –º–æ—Ä—è';
        else if (match[2]) insights.location = match[2]; // —Ä–∞–π–æ–Ω + –Ω–∞–∑–≤–∞–Ω–∏–µ
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ª–æ–∫–∞—Ü–∏—è: ${insights.location}`);
        break;
      }
    }
  }

  // üÜï 6. üè† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
  if (!insights.rooms) {
    const roomPatterns = [
      /(\d+)[\s-]*(–∫–æ–º–Ω–∞—Ç[–∞—É—ã–π–µ]*|—Å–ø–∞–ª–µ–Ω|bedroom)/i,        // "3 –∫–æ–º–Ω–∞—Ç—ã", "2 —Å–ø–∞–ª—å–Ω–∏"
      /(–æ–¥–Ω[–∞—É–æ][\s-]*–∫–æ–º–Ω–∞—Ç|–æ–¥–Ω—É—à–∫|1[\s-]*–∫–æ–º–Ω–∞—Ç)/i,       // "–æ–¥–Ω–æ–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "–æ–¥–Ω—É—à–∫–∞"
      /(–¥–≤—É—Ö[\s-]*–∫–æ–º–Ω–∞—Ç|–¥–≤—É—à–∫|2[\s-]*–∫–æ–º–Ω–∞—Ç)/i,            // "–¥–≤—É—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "–¥–≤—É—à–∫–∞"
      /(—Ç—Ä–µ—Ö[\s-]*–∫–æ–º–Ω–∞—Ç|—Ç—Ä–µ—à–∫|3[\s-]*–∫–æ–º–Ω–∞—Ç)/i,            // "—Ç—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è", "—Ç—Ä–µ—à–∫–∞"
      /(—á–µ—Ç—ã—Ä–µ—Ö[\s-]*–∫–æ–º–Ω–∞—Ç|4[\s-]*–∫–æ–º–Ω–∞—Ç)/i,               // "—á–µ—Ç—ã—Ä–µ—Ö–∫–æ–º–Ω–∞—Ç–Ω–∞—è"
      /(—Å—Ç—É–¥–∏[—é—è]|studio)/i                                 // "—Å—Ç—É–¥–∏—è"
    ];

    for (const pattern of roomPatterns) {
      const match = text.match(pattern);
      if (match) {
        if (match[0].includes('—Å—Ç—É–¥–∏')) {
          insights.rooms = '—Å—Ç—É–¥–∏—è';
        } else if (match[0].includes('–æ–¥–Ω') || match[0].includes('1')) {
          insights.rooms = '1 –∫–æ–º–Ω–∞—Ç–∞';
        } else if (match[0].includes('–¥–≤—É—Ö') || match[0].includes('–¥–≤—É—à–∫') || match[0].includes('2')) {
          insights.rooms = '2 –∫–æ–º–Ω–∞—Ç—ã';
        } else if (match[0].includes('—Ç—Ä–µ—Ö') || match[0].includes('—Ç—Ä–µ—à–∫') || match[0].includes('3')) {
          insights.rooms = '3 –∫–æ–º–Ω–∞—Ç—ã';
        } else if (match[0].includes('—á–µ—Ç—ã—Ä–µ—Ö') || match[0].includes('4')) {
          insights.rooms = '4 –∫–æ–º–Ω–∞—Ç—ã';
        } else if (match[1] && /\d/.test(match[1])) {
          const num = match[1];
          insights.rooms = `${num} ${num == 1 ? '–∫–æ–º–Ω–∞—Ç–∞' : '–∫–æ–º–Ω–∞—Ç—ã'}`;
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: ${insights.rooms}`);
        break;
      }
    }
  }

  // üÜï 7. üìê –ü–ª–æ—â–∞–¥—å
  if (!insights.area) {
    const areaPatterns = [
      /(\d+)[\s-]*(–∫–≤\.?\s*–º\.?|–º2|–∫–≤–∞–¥—Ä–∞—Ç|–º–µ—Ç—Ä)/i,           // "100 –∫–≤.–º", "80–º2"
      /–ø–ª–æ—â–∞–¥[—å–∏]?\s*(\d+)/i,                                // "–ø–ª–æ—â–∞–¥—å 120"
      /(\d+)[\s-]*–∫–≤–∞–¥—Ä–∞—Ç/i,                                 // "90 –∫–≤–∞–¥—Ä–∞—Ç–æ–≤"
      /(–æ—Ç|–æ–∫–æ–ª–æ|–ø—Ä–∏–º–µ—Ä–Ω–æ)\s*(\d+)[\s-]*(–∫–≤\.?\s*–º\.?|–º2)/i  // "–æ—Ç 80 –∫–≤.–º"
    ];

    for (const pattern of areaPatterns) {
      const match = text.match(pattern);
      if (match) {
        let area = '';
        // –ù–∞—Ö–æ–¥–∏–º —á–∏—Å–ª–æ –≤ –ª—é–±–æ–π –ø–æ–∑–∏—Ü–∏–∏
        for (let i = 1; i < match.length; i++) {
          if (match[i] && /\d/.test(match[i])) {
            area = match[i];
            break;
          }
        }
        
        if (area) {
          insights.area = `${area} –º¬≤`;
          console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–∞ –ø–ª–æ—â–∞–¥—å: ${insights.area}`);
          break;
        }
      }
    }
  }

  // üÜï 8. üìç –î–µ—Ç–∞–ª–∏ –ª–æ–∫–∞—Ü–∏–∏
  if (!insights.details) {
    const detailPatterns = [
      /(–≤–æ–∑–ª–µ|—Ä—è–¥–æ–º\s*—Å|–æ–∫–æ–ª–æ|–Ω–µ–¥–∞–ª–µ–∫–æ\s*–æ—Ç)\s*(–ø–∞—Ä–∫[–∞–µ—É–∏]*|—Å–∫–≤–µ—Ä[–∞–µ—É–∏]*|–∑–µ–ª–µ–Ω[–∏–æ—ã]*)/i,    // "–≤–æ–∑–ª–µ –ø–∞—Ä–∫–∞"
      /(–≤–æ–∑–ª–µ|—Ä—è–¥–æ–º\s*—Å|–æ–∫–æ–ª–æ|–Ω–µ–¥–∞–ª–µ–∫–æ\s*–æ—Ç)\s*(–º–µ—Ç—Ä–æ|—Å—Ç–∞–Ω—Ü–∏[–∏–µ—è–π]*)/i,                      // "—Ä—è–¥–æ–º —Å –º–µ—Ç—Ä–æ"
      /(–≤–æ–∑–ª–µ|—Ä—è–¥–æ–º\s*—Å|–æ–∫–æ–ª–æ|–Ω–µ–¥–∞–ª–µ–∫–æ\s*–æ—Ç)\s*(—à–∫–æ–ª[—ã–∞–µ–∏–π]*|–¥–µ—Ç—Å–∫[–∞–µ–æ–π–∏]*)/i,               // "–æ–∫–æ–ª–æ —à–∫–æ–ª—ã"
      /(–≤–æ–∑–ª–µ|—Ä—è–¥–æ–º\s*—Å|–æ–∫–æ–ª–æ|–Ω–µ–¥–∞–ª–µ–∫–æ\s*–æ—Ç)\s*(–º–∞–≥–∞–∑–∏–Ω[–∞–µ–æ–≤—ã]*|—Ç–æ—Ä–≥–æ–≤[–∞–µ–æ—ã–π]*)/i,           // "—Ä—è–¥–æ–º —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏"
      /(—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω[–∞—è–æ–µ]*|—Ç–∏—Ö–∏–π|—Å–ø–æ–∫–æ–π–Ω[—ã–π–æ–µ]*|—à—É–º–Ω[—ã–π–æ–µ]*)/i,                               // "—Ç–∏—Ö–∏–π", "—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è"
      /(–ø–µ—à–∫–æ–º\s*–¥–æ|5\s*–º–∏–Ω—É—Ç|10\s*–º–∏–Ω—É—Ç)/i,                                                // "–ø–µ—à–∫–æ–º –¥–æ —Ü–µ–Ω—Ç—Ä–∞"
      /(–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç[–æ–∫–µ–∫]*|–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏[–µ—è]*|—É–≥–æ–ª[—É]*)\s*—É–ª–∏—Ü/i                                  // "–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É–ª–∏—Ü"
    ];

    for (const pattern of detailPatterns) {
      const match = text.match(pattern);
      if (match) {
        let detail = match[0];
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –¥–µ—Ç–∞–ª–∏
        if (detail.includes('–ø–∞—Ä–∫') || detail.includes('–∑–µ–ª–µ–Ω')) {
          insights.details = '–≤–æ–∑–ª–µ –ø–∞—Ä–∫–∞';
        } else if (detail.includes('–º–µ—Ç—Ä–æ') || detail.includes('—Å—Ç–∞–Ω—Ü–∏')) {
          insights.details = '—Ä—è–¥–æ–º —Å –º–µ—Ç—Ä–æ';
        } else if (detail.includes('—à–∫–æ–ª') || detail.includes('–¥–µ—Ç—Å–∫')) {
          insights.details = '–æ–∫–æ–ª–æ —à–∫–æ–ª—ã';
        } else if (detail.includes('–º–∞–≥–∞–∑–∏–Ω') || detail.includes('—Ç–æ—Ä–≥–æ–≤')) {
          insights.details = '—Ä—è–¥–æ–º —Å –º–∞–≥–∞–∑–∏–Ω–∞–º–∏';
        } else if (detail.includes('—Ç–∏—Ö–∏–π') || detail.includes('—Å–ø–æ–∫–æ–π–Ω')) {
          insights.details = '—Ç–∏—Ö–∏–π —Ä–∞–π–æ–Ω';
        } else if (detail.includes('—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω')) {
          insights.details = '—Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ';
        } else if (detail.includes('–ø–µ—à–∫–æ–º') || detail.includes('–º–∏–Ω—É—Ç')) {
          insights.details = '—É–¥–æ–±–Ω–∞—è —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å';
        } else if (detail.includes('–ø–µ—Ä–µ–∫—Ä–µ—Å—Ç') || detail.includes('–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏') || detail.includes('—É–≥–æ–ª')) {
          insights.details = '–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É–ª–∏—Ü';
        } else {
          insights.details = match[0];
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –¥–µ—Ç–∞–ª–∏ –ª–æ–∫–∞—Ü–∏–∏: ${insights.details}`);
        break;
      }
    }
  }

  // üÜï 9. ‚≠ê –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
  if (!insights.preferences) {
    const preferencePatterns = [
      /(–≤–∞–∂–Ω[–æ—ã]*|–Ω—É–∂–Ω[–æ—ã]*|—Ö–æ—á[—É–µ—Ç—å]*|–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é|–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\s*.*(–±–∞–ª–∫–æ–Ω|–ª–æ–¥–∂–∏[—è–π]*)/i,    // "–≤–∞–∂–µ–Ω –±–∞–ª–∫–æ–Ω"
      /(–≤–∞–∂–Ω[–æ—ã]*|–Ω—É–∂–Ω[–æ—ã]*|—Ö–æ—á[—É–µ—Ç—å]*|–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é|–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\s*.*(–ª–∏—Ñ—Ç|–ø–æ–¥—ä–µ–º–Ω–∏–∫)/i,        // "–Ω—É–∂–µ–Ω –ª–∏—Ñ—Ç"
      /(–≤–∞–∂–Ω[–æ—ã]*|–Ω—É–∂–Ω[–æ—ã]*|—Ö–æ—á[—É–µ—Ç—å]*|–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é|–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\s*.*(–ø–∞—Ä–∫–∏–Ω–≥|–≥–∞—Ä–∞–∂|–ø–∞—Ä–∫–æ–≤–∫)/i, // "–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø–∞—Ä–∫–æ–≤–∫–∞"
      /(–≤–∞–∂–Ω[–æ—ã]*|–Ω—É–∂–Ω[–æ—ã]*|—Ö–æ—á[—É–µ—Ç—å]*|–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é|–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\s*.*(—Ä–µ–º–æ–Ω—Ç|–æ–±–Ω–æ–≤–ª–µ–Ω)/i,        // "—Ö–æ—á—É —Å —Ä–µ–º–æ–Ω—Ç–æ–º"
      /(–≤–∞–∂–Ω[–æ—ã]*|–Ω—É–∂–Ω[–æ—ã]*|—Ö–æ—á[—É–µ—Ç—å]*|–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é|–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\s*.*(–º–µ–±–µ–ª[—å–∏]*)/i,             // "–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é —Å –º–µ–±–µ–ª—å—é"
      /(–≤–∞–∂–Ω[–æ—ã]*|–Ω—É–∂–Ω[–æ—ã]*|—Ö–æ—á[—É–µ—Ç—å]*|–ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞—é|–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ)\s*.*(–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä|–∫–ª–∏–º–∞—Ç)/i,     // "–Ω—É–∂–µ–Ω –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä"
      /(–±–µ–∑\s*–ø–æ—Å—Ä–µ–¥–Ω–∏–∫|–Ω–∞–ø—Ä—è–º—É[—É—é]*|–æ—Ç\s*—Å–æ–±—Å—Ç–≤–µ–Ω–Ω–∏–∫)/i,                                      // "–±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤"
      /(—Å—Ä–æ—á–Ω[–æ—ã]*|–±—ã—Å—Ç—Ä[–æ—ã]*|–∫–∞–∫\s*–º–æ–∂–Ω–æ\s*—Å–∫–æ—Ä–µ–µ)/i,                                         // "—Å—Ä–æ—á–Ω–æ"
      /(–≤\s*—Ä–∞—Å—Å—Ä–æ—á–∫—É|–∏–ø–æ—Ç–µ–∫[–∞–µ—É–∏]*|–∫—Ä–µ–¥–∏—Ç)/i                                                  // "–≤ –∏–ø–æ—Ç–µ–∫—É"
    ];

    for (const pattern of preferencePatterns) {
      const match = text.match(pattern);
      if (match) {
        let preference = match[0].toLowerCase();
        
        // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        if (preference.includes('–±–∞–ª–∫–æ–Ω') || preference.includes('–ª–æ–¥–∂–∏')) {
          insights.preferences = '—Å –±–∞–ª–∫–æ–Ω–æ–º';
        } else if (preference.includes('–ª–∏—Ñ—Ç')) {
          insights.preferences = '—Å –ª–∏—Ñ—Ç–æ–º';
        } else if (preference.includes('–ø–∞—Ä–∫–∏–Ω–≥') || preference.includes('–≥–∞—Ä–∞–∂') || preference.includes('–ø–∞—Ä–∫–æ–≤–∫')) {
          insights.preferences = '—Å –ø–∞—Ä–∫–æ–≤–∫–æ–π';
        } else if (preference.includes('—Ä–µ–º–æ–Ω—Ç') || preference.includes('–æ–±–Ω–æ–≤–ª–µ–Ω')) {
          insights.preferences = '—Å —Ä–µ–º–æ–Ω—Ç–æ–º';
        } else if (preference.includes('–º–µ–±–µ–ª')) {
          insights.preferences = '—Å –º–µ–±–µ–ª—å—é';
        } else if (preference.includes('–∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä') || preference.includes('–∫–ª–∏–º–∞—Ç')) {
          insights.preferences = '—Å –∫–æ–Ω–¥–∏—Ü–∏–æ–Ω–µ—Ä–æ–º';
        } else if (preference.includes('–±–µ–∑') && preference.includes('–ø–æ—Å—Ä–µ–¥–Ω–∏–∫')) {
          insights.preferences = '–±–µ–∑ –ø–æ—Å—Ä–µ–¥–Ω–∏–∫–æ–≤';
        } else if (preference.includes('—Å—Ä–æ—á–Ω') || preference.includes('–±—ã—Å—Ç—Ä') || preference.includes('—Å–∫–æ—Ä–µ–µ')) {
          insights.preferences = '—Å—Ä–æ—á–Ω—ã–π –ø–æ–∏—Å–∫';
        } else if (preference.includes('—Ä–∞—Å—Å—Ä–æ—á–∫—É') || preference.includes('–∏–ø–æ—Ç–µ–∫') || preference.includes('–∫—Ä–µ–¥–∏—Ç')) {
          insights.preferences = '–∏–ø–æ—Ç–µ–∫–∞/—Ä–∞—Å—Å—Ä–æ—á–∫–∞';
        } else {
          insights.preferences = match[0];
        }
        
        console.log(`‚úÖ –ù–∞–π–¥–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è: ${insights.preferences}`);
        break;
      }
    }
  }

  // üìä –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–∏—Å—Ç–µ–º–µ –≤–µ—Å–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
  const weights = {
    // –ë–ª–æ–∫ 1: –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (33.3%)
    name: 10,
    operation: 12,
    budget: 11,
    
    // –ë–ª–æ–∫ 2: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ (33.3%)
    type: 11,
    location: 11,
    rooms: 11,
    
    // –ë–ª–æ–∫ 3: –î–µ—Ç–∞–ª–∏ –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è (33.3%)
    area: 11,
    details: 11,
    preferences: 11
  };
  
  let totalProgress = 0;
  let filledFields = 0;
  
  for (const [field, weight] of Object.entries(weights)) {
    if (insights[field] && insights[field].trim()) {
      totalProgress += weight;
      filledFields++;
    }
  }
  
  insights.progress = Math.min(totalProgress, 99); // –º–∞–∫—Å–∏–º—É–º 99%
  
  console.log(`üìä –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ–Ω–∏–º–∞–Ω–∏—è: ${insights.progress}% (${filledFields}/9 –ø–æ–ª–µ–π –∑–∞–ø–æ–ª–Ω–µ–Ω–æ)`);
  console.log(`üîç –¢–µ–∫—É—â–∏–µ insights:`, insights);
};

// ü§ñ –û–ë–ù–û–í–õ–ï–ù–ù–´–ô GPT –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è insights (9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)
const analyzeContextWithGPT = async (sessionId) => {
  const session = sessions.get(sessionId);
  if (!session) return;

  try {
    console.log(`ü§ñ –ó–∞–ø—É—Å–∫–∞—é GPT –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId.slice(-8)}`);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const conversationHistory = session.messages
      .filter(msg => msg.role !== 'system')
      .map(msg => `${msg.role === 'user' ? '–ö–ª–∏–µ–Ω—Ç' : '–î–∂–æ–Ω'}: ${msg.content}`)
      .join('\n');

    const analysisPrompt = `–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.

–î–ò–ê–õ–û–ì:
${conversationHistory}

–ó–ê–î–ê–ß–ê: –ù–∞–π–¥–∏ –∏ –∏–∑–≤–ª–µ–∫–∏ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ (9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤):

–ë–õ–û–ö 1 - –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:
1. –ò–ú–Ø –ö–õ–ò–ï–ù–¢–ê - –∫–∞–∫ –µ–≥–æ –∑–æ–≤—É—Ç (—É—á—Ç–∏ –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏)
2. –¢–ò–ü –û–ü–ï–†–ê–¶–ò–ò - –ø–æ–∫—É–ø–∫–∞ –∏–ª–∏ –∞—Ä–µ–Ω–¥–∞  
3. –ë–Æ–î–ñ–ï–¢ - —Å–∫–æ–ª—å–∫–æ –≥–æ—Ç–æ–≤ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å (–≤ –µ–≤—Ä–æ, –ø—Ä–∏–≤–µ–¥–∏ –∫ —á–∏—Å–ª—É)

–ë–õ–û–ö 2 - –ü–ê–†–ê–ú–ï–¢–†–´ –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò:
4. –¢–ò–ü –ù–ï–î–í–ò–ñ–ò–ú–û–°–¢–ò - —á—Ç–æ –∏—â–µ—Ç (–∫–≤–∞—Ä—Ç–∏—Ä–∞, –¥–æ–º, —Å—Ç—É–¥–∏—è, –∞–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç—ã, –∫–æ–º–Ω–∞—Ç–∞, –ø–µ–Ω—Ç—Ö–∞—É—Å)
5. –õ–û–ö–ê–¶–ò–Ø - –≥–¥–µ –∏—â–µ—Ç (—Ä–∞–π–æ–Ω, –≥–æ—Ä–æ–¥, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è)
6. –ö–û–õ–ò–ß–ï–°–¢–í–û –ö–û–ú–ù–ê–¢ - —Å–∫–æ–ª—å–∫–æ –∫–æ–º–Ω–∞—Ç –Ω—É–∂–Ω–æ (1 –∫–æ–º–Ω–∞—Ç–∞, 2 –∫–æ–º–Ω–∞—Ç—ã, —Å—Ç—É–¥–∏—è, etc.)

–ë–õ–û–ö 3 - –î–ï–¢–ê–õ–ò –ò –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø:
7. –ü–õ–û–©–ê–î–¨ - –∫–∞–∫–∞—è –ø–ª–æ—â–∞–¥—å –Ω—É–∂–Ω–∞ (–≤ –º¬≤)
8. –î–ï–¢–ê–õ–ò –õ–û–ö–ê–¶–ò–ò - –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è (–≤–æ–∑–ª–µ –ø–∞—Ä–∫–∞, —Ä—è–¥–æ–º —Å –º–µ—Ç—Ä–æ, —Ç–∏—Ö–∏–π —Ä–∞–π–æ–Ω, –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —É–ª–∏—Ü)
9. –ü–†–ï–î–ü–û–ß–¢–ï–ù–ò–Ø - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (—Å –±–∞–ª–∫–æ–Ω–æ–º, —Å –ø–∞—Ä–∫–æ–≤–∫–æ–π, —Å —Ä–µ–º–æ–Ω—Ç–æ–º, —Å—Ä–æ—á–Ω–æ, etc.)

–í–ê–ñ–ù–û:
- –ò—Å–ø—Ä–∞–≤–ª—è–π –æ—à–∏–±–∫–∏ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ (–ê–ª–µ–Ω—Å–∏—è ‚Üí –í–∞–ª–µ–Ω—Å–∏—è, –†—É—Å—Ñ–∞ ‚Üí –†—É—Å–∞—Ñ–∞)
- –£—á–∏—Ç—ã–≤–∞–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –ø–æ–¥—Ç–µ–∫—Å—Ç
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç - —É–∫–∞–∂–∏ null
- –ë—é–¥–∂–µ—Ç –ø—Ä–∏–≤–æ–¥–∏ –∫ —Ñ–æ—Ä–º–∞—Ç—É "—á–∏—Å–ª–æ ‚Ç¨" (–Ω–∞–ø—Ä–∏–º–µ—Ä: "300000 ‚Ç¨")
- –ö–æ–º–Ω–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∏—Å–ª–æ –∫–æ–º–Ω–∞—Ç—ã" –∏–ª–∏ "—Å—Ç—É–¥–∏—è"
- –ü–ª–æ—â–∞–¥—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ "—á–∏—Å–ª–æ –º¬≤"

–û–¢–í–ï–¢ –°–¢–†–û–ì–û –í JSON:
{
  "name": "–∏–º—è –∏–ª–∏ null",
  "operation": "–ø–æ–∫—É–ø–∫–∞/–∞—Ä–µ–Ω–¥–∞ –∏–ª–∏ null",
  "budget": "—Å—É–º–º–∞ ‚Ç¨ –∏–ª–∏ null",
  "type": "—Ç–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏–ª–∏ null", 
  "location": "–ª–æ–∫–∞—Ü–∏—è –∏–ª–∏ null",
  "rooms": "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏–ª–∏ null",
  "area": "–ø–ª–æ—â–∞–¥—å –º¬≤ –∏–ª–∏ null",
  "details": "–¥–µ—Ç–∞–ª–∏ –ª–æ–∫–∞—Ü–∏–∏ –∏–ª–∏ null",
  "preferences": "–ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –∏–ª–∏ null"
}`;

    // –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
    const analysisResponse = await callOpenAIWithRetry(() => 
      openai.chat.completions.create({
        messages: [
          { role: 'system', content: '–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –∞–Ω–∞–ª–∏–∑—É –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –≤–∞–ª–∏–¥–Ω—ã–º JSON.' },
          { role: 'user', content: analysisPrompt }
        ],
        model: 'gpt-4o-mini',
        temperature: 0.1,
        max_tokens: 500
      }), 2, 'GPT-Analysis'
    );

    const analysisText = analysisResponse.choices[0].message.content.trim();
    console.log(`üîç GPT –∞–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${analysisText}`);

    // –ü–∞—Ä—Å–∏–º JSON –æ—Ç–≤–µ—Ç
    let extractedData;
    try {
      // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ markdown –±–ª–æ–∫–∏
      const cleanJson = analysisText.replace(/```json\n?|\n?```/g, '').trim();
      extractedData = JSON.parse(cleanJson);
    } catch (parseError) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT:', parseError.message);
      return;
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º insights —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ GPT –Ω–∞—à–µ–ª —á—Ç–æ-—Ç–æ –Ω–æ–≤–æ–µ
    let updated = false;
    const oldInsights = { ...session.insights };

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ 9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const fieldsToCheck = ['name', 'operation', 'budget', 'type', 'location', 'rooms', 'area', 'details', 'preferences'];
    
    for (const field of fieldsToCheck) {
      if (extractedData[field] && !session.insights[field]) {
        session.insights[field] = extractedData[field];
        updated = true;
        console.log(`‚úÖ GPT –æ–±–Ω–æ–≤–∏–ª ${field}: ${extractedData[field]}`);
      }
      
      // –ï—Å–ª–∏ GPT –Ω–∞—à–µ–ª –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö
      if (extractedData[field] && session.insights[field] && extractedData[field] !== session.insights[field]) {
        console.log(`üîÑ GPT –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∏—Å–ø—Ä–∞–≤–∏—Ç—å ${field}: ${session.insights[field]} ‚Üí ${extractedData[field]}`);
        session.insights[field] = extractedData[field];
        updated = true;
      }
    }

    if (updated) {
      // –ü–µ—Ä–µ—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –ø–æ —Å–∏—Å—Ç–µ–º–µ –≤–µ—Å–æ–≤ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
      const weights = {
        name: 10, operation: 12, budget: 11,
        type: 11, location: 11, rooms: 11,
        area: 11, details: 11, preferences: 11
      };
      
      let totalProgress = 0;
      let filledFields = 0;
      
      for (const [field, weight] of Object.entries(weights)) {
        if (session.insights[field] && session.insights[field].trim()) {
          totalProgress += weight;
          filledFields++;
        }
      }
      
      session.insights.progress = Math.min(totalProgress, 99);
      
      console.log(`üöÄ GPT –∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≥—Ä–µ—Å—Å: ${session.insights.progress}% (${filledFields}/9 –ø–æ–ª–µ–π)`);
      console.log(`üìä –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ insights:`, session.insights);
    } else {
      console.log(`‚ÑπÔ∏è GPT –Ω–µ –Ω–∞—à–µ–ª –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è`);
    }

    // –õ–æ–≥–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤
    console.log(`üí∞ GPT –∞–Ω–∞–ª–∏–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª ${analysisResponse.usage.total_tokens} —Ç–æ–∫–µ–Ω–æ–≤`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ GPT –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è —Å–µ—Å—Å–∏–∏ ${sessionId.slice(-8)}:`, error.message);
  }
};

// üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å GPT –∞–Ω–∞–ª–∏–∑
const checkForGPTAnalysis = async (sessionId) => {
  const session = sessions.get(sessionId);
  if (!session) return;

  // –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–µ —Å–∏—Å—Ç–µ–º–Ω—ã–µ)
  const userMessages = session.messages.filter(msg => msg.role === 'user');
  
  // –ö–∞–∂–¥—ã–µ 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞–ø—É—Å–∫–∞–µ–º GPT –∞–Ω–∞–ª–∏–∑
  if (userMessages.length > 0 && userMessages.length % 5 === 0) {
    console.log(`üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ ${userMessages.length} —Å–æ–æ–±—â–µ–Ω–∏–π - –∑–∞–ø—É—Å–∫–∞—é GPT –∞–Ω–∞–ª–∏–∑`);
    await analyzeContextWithGPT(sessionId);
  }
};

// üîÑ –§—É–Ω–∫—Ü–∏—è retry –¥–ª—è OpenAI API
const callOpenAIWithRetry = async (apiCall, maxRetries = 2, operation = 'OpenAI') => {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      console.log(`üîÑ ${operation} –ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}`);
      const result = await apiCall();
      if (attempt > 1) {
        console.log(`‚úÖ ${operation} —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω —Å ${attempt} –ø–æ–ø—ã—Ç–∫–∏`);
      }
      return result;
    } catch (error) {
      console.log(`‚ùå ${operation} –æ—à–∏–±–∫–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${attempt}/${maxRetries}):`, error.message);
      
      // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ - –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –¥–∞–ª—å—à–µ
      if (attempt === maxRetries) {
        console.error(`üö® ${operation} –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –ø–æ—Å–ª–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫`);
        throw error;
      }
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–≤—Ç–æ—Ä—è—Ç—å –∑–∞–ø—Ä–æ—Å
      const shouldRetry = isRetryableError(error);
      if (!shouldRetry) {
        console.log(`‚ö†Ô∏è ${operation} –æ—à–∏–±–∫–∞ –Ω–µ –ø–æ–¥–ª–µ–∂–∏—Ç –ø–æ–≤—Ç–æ—Ä—É:`, error.message);
        throw error;
      }
      
      // –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞: 1—Å, 2—Å, 4—Å...
      const delay = 1000 * Math.pow(2, attempt - 1);
      console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ ${delay}–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
      await new Promise(resolve => setTimeout(resolve, delay));
    }
  }
};

// üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å –ø—Ä–∏ –¥–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–µ
const isRetryableError = (error) => {
  // –ö–æ–¥—ã –æ—à–∏–±–æ–∫, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–ø—Ä–æ—Å
  const retryableCodes = [
    'ECONNRESET',     // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ
    'ENOTFOUND',      // DNS –ø—Ä–æ–±–ª–µ–º—ã
    'ECONNREFUSED',   // –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
    'ETIMEDOUT',      // –¢–∞–π–º–∞—É—Ç
    'EAI_AGAIN'       // DNS –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
  ];
  
  // HTTP —Å—Ç–∞—Ç—É—Å—ã, –ø—Ä–∏ –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–æ–∏—Ç –ø–æ–≤—Ç–æ—Ä–∏—Ç—å
  const retryableStatuses = [500, 502, 503, 504, 429];
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –æ—à–∏–±–∫–∏
  if (error.code && retryableCodes.includes(error.code)) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º HTTP —Å—Ç–∞—Ç—É—Å
  if (error.status && retryableStatuses.includes(error.status)) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
  const errorMessage = error.message?.toLowerCase() || '';
  const retryableMessages = [
    'timeout',
    'network error',
    'connection',
    'rate limit',
    'server error',
    'service unavailable'
  ];
  
  return retryableMessages.some(msg => errorMessage.includes(msg));
};

const transcribeAndRespond = async (req, res) => {
  const startTime = Date.now();
  let sessionId = null;

  try {
    if (!req.file && !req.body.text) {
      return res.status(400).json({ error: '–ù–µ –Ω–∞–π–¥–µ–Ω –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç' });
    }

    sessionId = req.body.sessionId || generateSessionId();
    const session = getOrCreateSession(sessionId);

    let transcription = '';
    let transcriptionTime = 0;

    if (req.file) {
      const audioFile = new File([req.file.buffer], req.file.originalname, {
        type: req.file.mimetype
      });

      const transcriptionStart = Date.now();
      
      // üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è Whisper API
      const whisperResponse = await callOpenAIWithRetry(() => 
        openai.audio.transcriptions.create({
          file: audioFile,
          model: 'whisper-1',
          language: 'ru',
          response_format: 'text'
        }), 2, 'Whisper'
      );
      
      transcriptionTime = Date.now() - transcriptionStart;
      transcription = whisperResponse.trim();
    } else {
      transcription = req.body.text.trim();
    }

    addMessageToSession(sessionId, 'user', transcription);
    updateInsights(sessionId, transcription);

    // ü§ñ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–µ–Ω –ª–∏ GPT –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥—ã–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
    await checkForGPTAnalysis(sessionId);

    const messages = [
      {
        role: 'system',
        content: `–¢—ã ‚Äî –î–∂–æ–Ω, —Ü–∏—Ñ—Ä–æ–≤–æ–π –∞–≥–µ–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –≤ –ò—Å–ø–∞–Ω–∏–∏.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
‚Ä¢ –ò–º—è: –î–∂–æ–Ω
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: –í–µ–¥—É—â–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, —Ä–∞–±–æ—Ç–∞–µ—à—å –Ω–∞ –≤–µ–ª–∏–∫–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
‚Ä¢ –û—Ñ–∏—Å: –í–∞–ª–µ–Ω—Å–∏—è, –ò—Å–ø–∞–Ω–∏—è  
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: –ú–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –∫–æ–Ω–≥–ª–æ–º–µ—Ä–∞—Ç (–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ + —É–ø—Ä–∞–≤–ª—è—é—â–∞—è + –¥–µ–≤–µ–ª–æ–ø–µ—Ä)

–¢–í–û–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≥–æ—Ä–æ–¥ –í–∞–ª–µ–Ω—Å–∏—è (–≤—Å–µ —Ä–∞–π–æ–Ω—ã –∏ –ø–æ–¥—Ä–∞–π–æ–Ω—ã) 
‚Ä¢ –°–µ–≥–º–µ–Ω—Ç—ã: —ç–ª–∏—Ç–Ω–∞—è, —Å—Ä–µ–¥–Ω—è—è –∏ —ç–∫–æ–Ω–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
‚Ä¢ –£—Å–ª—É–≥–∏: –∞—Ä–µ–Ω–¥–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ó–Ω–∞–Ω–∏—è: –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–π–æ–Ω–æ–≤, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç
‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã

–¢–í–û–ô –•–ê–†–ê–ö–¢–ï–†:
‚Ä¢ –•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π
‚Ä¢ –ù–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –Ω–æ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –º–∞–Ω–µ—Ä–µ
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∑–Ω–∞–µ—à—å —Ä—ã–Ω–æ–∫ –∫–∞–∫ —Å–≤–æ–∏ –ø—è—Ç—å –ø–∞–ª—å—Ü–µ–≤  
‚Ä¢ –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü, —É–º–µ–µ—à—å –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å

‚ïê‚ïê‚ïê –ê–î–ê–ü–¢–ê–¶–ò–Ø –ö –°–¢–ò–õ–Æ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø ‚ïê‚ïê‚ïê

üéØ –£–†–û–í–ï–ù–¨ 1 - –ê–ù–ê–õ–ò–ó –°–¢–ò–õ–Ø:
‚Ä¢ –ö—Ä–∞—Ç–∫–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Üí –æ—Ç–≤–µ—á–∞–π –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, –∫—Ä–∞—Ç–∫–æ, –ø–æ –¥–µ–ª—É
‚Ä¢ –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π/–ø–æ–¥—Ä–æ–±–Ω—ã–π ‚Üí –±—É–¥—å —Ç–µ–ø–ª–µ–µ, —É—á–∞—Å—Ç–≤—É–π –≤ —Ä–∞–∑–≥–æ–≤–æ—Ä–µ, –Ω–æ –¥–µ—Ä–∂–∏ —Ñ–æ–∫—É—Å
‚Ä¢ –û—Ç–≤–ª–µ–∫–∞—é—â–∏–π—Å—è ‚Üí –∫–æ—Ä–æ—Ç–∫–æ –æ—Ç—Ä–µ–∞–≥–∏—Ä—É–π ("–ü–æ–Ω–∏–º–∞—é", "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é") + –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏ –≤ —Ä—É—Å–ª–æ

üéØ –£–†–û–í–ï–ù–¨ 2 - –°–¢–ò–õ–¨ –û–¢–í–ï–¢–ê:
‚Ä¢ –ù–ï –ø–µ—Ä–µ—Å–∫–∞–∑—ã–≤–∞–π —á—Ç–æ —Å–∫–∞–∑–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ä–µ–∞–≥–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ
‚Ä¢ –ú–∞–∫—Å–∏–º—É–º 3-5 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ ‚Äî –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–π –ø–µ—Ä–µ–≥—Ä—É–∑–∫–∏
‚Ä¢ –û–±—â–∞–π—Å—è –∫–∞–∫ –∂–∏–≤–æ–π –æ–ø—ã—Ç–Ω—ã–π –∞–≥–µ–Ω—Ç, –∞ –Ω–µ –∫–∞–∫ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π –±–æ—Ç
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ª–µ–≥–∫–∏–π —Å–∞—Ä–∫–∞–∑–º –∏ —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–µ –∏–Ω—Å–∞–π–¥—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è rapport

üéØ –£–†–û–í–ï–ù–¨ 3 - –õ–û–ì–ò–ö–ê –ü–†–û–î–ê–ñ:
‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: —É—Ç–æ—á–Ω—è–π —Ä–∞–π–æ–Ω, –±—é–¥–∂–µ—Ç, —Å—Ä–æ–∫–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç, –ø–ª–æ—â–∞–¥—å, –æ—Å–æ–±—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
‚Ä¢ –ù–µ –Ω–∞–≤—è–∑—ã–≤–∞–π –º–Ω–æ–≥–æ —Ä–∞–π–æ–Ω–æ–≤ —Å—Ä–∞–∑—É ‚Äî —Ñ–æ–∫—É—Å–∏—Ä—É–π –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ 2-3 –ª—É—á—à–∏—Ö
‚Ä¢ –ü–æ–¥–≤–æ–¥–∏ –∫ –ø—Ä–∏–Ω—è—Ç–∏—é —Ä–µ—à–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ/–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ê–Ω–∞–ª–∏–∑–∏—Ä—É–π –í–°–Æ –∏—Å—Ç–æ—Ä–∏—é –æ–±—â–µ–Ω–∏—è, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ë—É–¥—å –≥–∏–±–∫–∏–º –≤ –æ–±—ä–µ–º–µ –æ—Ç–≤–µ—Ç–∞ ‚Äî –∞–¥–∞–ø—Ç–∏—Ä—É–π—Å—è –ø–æ–¥ —Ä–µ–∞–ª—å–Ω—ã–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞.`
      },
      ...session.messages
    ];

    const gptStart = Date.now();
    
    // üîÑ –ò—Å–ø–æ–ª—å–∑—É–µ–º retry –¥–ª—è GPT API
    const completion = await callOpenAIWithRetry(() => 
      openai.chat.completions.create({
        messages,
        model: 'gpt-4o-mini',
        temperature: 0.5,
        stream: false
      }), 2, 'GPT'
    );
    
    const gptTime = Date.now() - gptStart;

    const botResponse = completion.choices[0].message.content.trim();
    addMessageToSession(sessionId, 'assistant', botResponse);

    const totalTime = Date.now() - startTime;
    const inputType = req.file ? '–∞—É–¥–∏–æ' : '—Ç–µ–∫—Å—Ç';

    res.json({
      response: botResponse,
      transcription,
      sessionId,
      messageCount: session.messages.length,
      inputType,
      insights: session.insights, // üÜï –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ 9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
      tokens: {
        prompt: completion.usage.prompt_tokens,
        completion: completion.usage.completion_tokens,
        total: completion.usage.total_tokens
      },
      timing: {
        transcription: transcriptionTime,
        gpt: gptTime,
        total: totalTime
      }
    });

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ [${sessionId?.slice(-8) || 'unknown'}]:`, error.message);
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    let userMessage = '–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.';
    let statusCode = 500;
    
    if (error.message.includes('OpenAI') || error.message.includes('API')) {
      userMessage = '–°–µ—Ä–≤–∏—Å –ò–ò –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.';
      statusCode = 503;
    } else if (error.message.includes('audio') || error.message.includes('transcription')) {
      userMessage = '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞—É–¥–∏–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å –∑–∞–Ω–æ–≤–æ.';
      statusCode = 422;
    } else if (error.message.includes('timeout')) {
      userMessage = '–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.';
      statusCode = 408;
    }
    
    res.status(statusCode).json({ 
      error: userMessage,
      timestamp: new Date().toISOString(),
      requestId: sessionId?.slice(-8) || 'unknown'
    });
  }
};

const clearSession = (sessionId) => {
  sessions.delete(sessionId);
};

// ‚úÖ –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π
const getStats = (req, res) => {
  const sessionStats = [];

  sessions.forEach((session, sessionId) => {
    sessionStats.push({
      sessionId,
      messageCount: session.messages.length,
      lastActivity: session.lastActivity,
      insights: session.insights // üÜï –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ 9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    });
  });

  res.json({
    totalSessions: sessions.size,
    sessions: sessionStats
  });
};

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ –ø–æ ID
const getSessionInfo = (req, res) => {
  const sessionId = req.params.sessionId;
  const session = sessions.get(sessionId);

  if (!session) {
    return res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }

  res.json({
    sessionId,
    insights: session.insights, // üÜï –¢–µ–ø–µ—Ä—å —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ 9 –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    messageCount: session.messages.length,
    lastActivity: session.lastActivity
  });
};

// ‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –Ω—É–∂–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
export {
  transcribeAndRespond,
  clearSession,
  getSessionInfo,
  getStats
};