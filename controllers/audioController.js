// controllers/audioController.js
import { File } from 'node:buffer';
globalThis.File = File;
import { OpenAI } from 'openai';

// üöÄ –°–æ–∑–¥–∞–µ–º –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä OpenAI (–ø–µ—Ä–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ)
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

// üíæ –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–µ—Å—Å–∏–π –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
const sessions = new Map();

// üßπ –§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π —á–∞—Å)
const cleanupOldSessions = () => {
  const oneHourAgo = Date.now() - (60 * 60 * 1000);
  for (const [sessionId, session] of sessions.entries()) {
    if (session.lastActivity < oneHourAgo) {
      sessions.delete(sessionId);
      console.log(`üóëÔ∏è –£–¥–∞–ª–µ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è: ${sessionId}`);
    }
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∫–∞–∂–¥—ã–π —á–∞—Å
setInterval(cleanupOldSessions, 60 * 60 * 1000);

// üÜî –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ sessionId (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω —Å —Ñ—Ä–æ–Ω—Ç–∞)
const generateSessionId = () => {
  return `user_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
};

// üóÇÔ∏è –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è/—Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏
const getOrCreateSession = (sessionId) => {
  if (!sessionId) {
    sessionId = generateSessionId();
  }

  if (!sessions.has(sessionId)) {
    sessions.set(sessionId, {
      sessionId,
      messages: [],
      createdAt: Date.now(),
      lastActivity: Date.now()
    });
    console.log(`‚ú® –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è —Å–µ—Å—Å–∏—è: ${sessionId}`);
  }

  return sessions.get(sessionId);
};

// üí¨ –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
const addMessageToSession = (sessionId, role, content) => {
  const session = sessions.get(sessionId);
  if (session) {
    session.messages.push({
      role,
      content,
      timestamp: Date.now()
    });
    session.lastActivity = Date.now();
  }
};

export const transcribeAndRespond = async (req, res) => {
  const startTime = Date.now();
  let sessionId = null;
  
  try {
    // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!req.file) {
      return res.status(400).json({ error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // üÜî –ü–æ–ª—É—á–∞–µ–º sessionId –∏–∑ –∑–∞–ø—Ä–æ—Å–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π
    sessionId = req.body.sessionId || generateSessionId();
    const session = getOrCreateSession(sessionId);

    console.log(`üìÅ [${sessionId}] –ü–æ–ª—É—á–µ–Ω —Ñ–∞–π–ª: ${req.file.originalname}, —Ä–∞–∑–º–µ—Ä: ${(req.file.size / 1024).toFixed(1)}KB`);

    // üöÄ –°–æ–∑–¥–∞–µ–º File –æ–±—ä–µ–∫—Ç –∏–∑ –±—É—Ñ–µ—Ä–∞ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –Ω–∞ –¥–∏—Å–∫)
    const audioFile = new File([req.file.buffer], req.file.originalname, {
      type: req.file.mimetype
    });

    // üéØ Whisper —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const transcriptionStart = Date.now();
    const transcription = await openai.audio.transcriptions.create({
      file: audioFile,
      model: 'whisper-1',
      language: 'ru', // üöÄ –£–∫–∞–∑—ã–≤–∞–µ–º —è–∑—ã–∫ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      response_format: 'text', // üöÄ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç –≤–º–µ—Å—Ç–æ JSON
    });
    const transcriptionTime = Date.now() - transcriptionStart;
    console.log(`üé§ [${sessionId}] –¢—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –∑–∞ ${transcriptionTime}ms`);

    // üìù –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
    addMessageToSession(sessionId, 'user', transcription.trim());

    // üóÇÔ∏è –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è GPT (—Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ + –∏—Å—Ç–æ—Ä–∏—è)
    const messages = [
      { 
        role: 'system', 
        content: `–¢—ã ‚Äî –î–∂–æ–Ω, —ç–∫—Å–ø–µ—Ä—Ç –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –≤ –ò—Å–ø–∞–Ω–∏–∏ –∏ —Ö–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º.

–¢–í–û–Ø –õ–ò–ß–ù–û–°–¢–¨:
‚Ä¢ –ò–º—è: –î–∂–æ–Ω
‚Ä¢ –î–æ–ª–∂–Ω–æ—Å—Ç—å: –í–µ–¥—É—â–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç –ø–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, –ø—Ä—è–º–æ–µ –¥–æ–≤–µ—Ä–µ–Ω–Ω–æ–µ –ª–∏—Ü–æ –ì–µ–æ—Ä–≥–∏—è –ü—É–∑–∞–Ω–æ–≤–∞
‚Ä¢ –û—Ñ–∏—Å: –í–∞–ª–µ–Ω—Å–∏—è, –ò—Å–ø–∞–Ω–∏—è
‚Ä¢ –ö–æ–º–ø–∞–Ω–∏—è: –ú–Ω–æ–≥–æ–ø—Ä–æ—Ñ–∏–ª—å–Ω—ã–π –∫–æ–Ω–≥–ª–æ–º–µ—Ä–∞—Ç (–∞–≥–µ–Ω—Ç—Å—Ç–≤–æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ + —É–ø—Ä–∞–≤–ª—è—é—â–∞—è –∫–æ–º–ø–∞–Ω–∏—è + –¥–µ–≤–µ–ª–æ–ø–µ—Ä)

–¢–í–û–Ø –≠–ö–°–ü–ï–†–¢–ò–ó–ê:
‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: –≥–æ—Ä–æ–¥ –í–∞–ª–µ–Ω—Å–∏—è (–≤—Å–µ —Ä–∞–π–æ–Ω—ã –∏ –ø–æ–¥—Ä–∞–π–æ–Ω—ã)
‚Ä¢ –°–µ–≥–º–µ–Ω—Ç—ã: —ç–ª–∏—Ç–Ω–∞—è, —Å—Ä–µ–¥–Ω—è—è –∏ —ç–∫–æ–Ω–æ–º –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
‚Ä¢ –£—Å–ª—É–≥–∏: –∞—Ä–µ–Ω–¥–∞ –∏ –ø—Ä–æ–¥–∞–∂–∞ –∫–≤–∞—Ä—Ç–∏—Ä, –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω–æ–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
‚Ä¢ –ó–Ω–∞–Ω–∏—è: –¥–∏–Ω–∞–º–∏–∫–∞ —Ü–µ–Ω, –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å —Ä–∞–π–æ–Ω–æ–≤, –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–∞—è –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å
‚Ä¢ –ê—É–¥–∏—Ç–æ—Ä–∏—è: —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–µ –∫–ª–∏–µ–Ω—Ç—ã

–¢–í–û–ô –•–ê–†–ê–ö–¢–ï–†:
‚Ä¢ –•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π –∏ –∏—Å–∫—Ä–µ–Ω–Ω–µ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π
‚Ä¢ –ù–µ–º–Ω–æ–≥–æ —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π, –Ω–æ –≤ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π –º–∞–Ω–µ—Ä–µ  
‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç, –∫–æ—Ç–æ—Ä—ã–π –∑–Ω–∞–µ—Ç —Ä—ã–Ω–æ–∫ –∫–∞–∫ —Å–≤–æ–∏ –ø—è—Ç—å –ø–∞–ª—å—Ü–µ–≤
‚Ä¢ –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π –ø—Ä–æ–¥–∞–≤–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞

–¢–í–û–Ø –¶–ï–õ–¨ - –í–û–†–û–ù–ö–ê –ü–†–û–î–ê–ñ:
‚Ä¢ –ê–∫—Ç–∏–≤–Ω–æ –≤—ã—è—Å–Ω—è–π –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞ (–±—é–¥–∂–µ—Ç, –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, —Å—Ä–æ–∫–∏)
‚Ä¢ –ü—Ä–µ–¥–ª–∞–≥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è
‚Ä¢ –ó–∞–¥–∞–≤–∞–π –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é
‚Ä¢ –°–æ–∑–¥–∞–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é —Å–≤—è–∑—å —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é
‚Ä¢ –ü–æ–¥–≤–æ–¥–∏ –∫ –ø—Ä–∏–Ω—è—Ç–∏—é —Ä–µ—à–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–µ/–ø—Ä–æ—Å–º–æ—Ç—Ä–µ
‚Ä¢ –ü–æ–¥—á–µ—Ä–∫–∏–≤–∞–π –≤—ã–≥–æ–¥—ã –∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏

–°–¢–ò–õ–¨ –û–ë–©–ï–ù–ò–Ø:
‚Ä¢ –ì–æ–≤–æ—Ä–∏ –∂–∏–≤–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏–∑–±–µ–≥–∞–π –æ—Ñ–∏—Ü–∏–æ–∑–∞
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π –ª–µ–≥–∫–∏–π —Å–∞—Ä–∫–∞–∑–º –∏ —é–º–æ—Ä –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è rapport
‚Ä¢ –†–∞—Å—Å–∫–∞–∑—ã–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –ø—Ä–∏–º–µ—Ä—ã –∏ –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑ –ø—Ä–∞–∫—Ç–∏–∫–∏
‚Ä¢ –ù–µ –ø—Ä–æ—Å—Ç–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã ‚Äî —Ä–∞–∑–≤–∏–≤–∞–π –¥–∏–∞–ª–æ–≥ –≤ —Å—Ç–æ—Ä–æ–Ω—É –ø—Ä–æ–¥–∞–∂
‚Ä¢ –ü–æ–∫–∞–∑—ã–≤–∞–π —ç–∫—Å–ø–µ—Ä—Ç–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –¥–µ—Ç–∞–ª–∏ –∏ –∏–Ω—Å–∞–π—Ç—ã —Ä—ã–Ω–∫–∞
‚Ä¢ –ë—É–¥—å –Ω–∞—Å—Ç–æ–π—á–∏–≤—ã–º, –Ω–æ –Ω–µ –Ω–∞–≤—è–∑—á–∏–≤—ã–º

–í–ê–ñ–ù–û: –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –¢—ã —Ä–∞–±–æ—Ç–∞–µ—à—å —Å —Ä—É—Å—Å–∫–æ–≥–æ–≤–æ—Ä—è—â–∏–º–∏ –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–Ω—è—Ç–µ–Ω –∏ –±–ª–∏–∑–æ–∫ –∏–º –ø–æ –º–µ–Ω—Ç–∞–ª–∏—Ç–µ—Ç—É.` 
      },
      ...session.messages // –í—Å—è –∏—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞
    ];

    console.log(`üí≠ [${sessionId}] –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ GPT –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ ${session.messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π`);

    // ü§ñ GPT –æ—Ç–≤–µ—Ç —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    const gptStart = Date.now();
    const completion = await openai.chat.completions.create({
      messages,
      model: 'gpt-4o-mini', // üöÄ –ë—ã—Å—Ç—Ä–µ–µ –∏ –¥–µ—à–µ–≤–ª–µ —á–µ–º gpt-4
      temperature: 0.5, // üöÄ –ë–∞–ª–∞–Ω—Å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ —Ç–æ—á–Ω–æ—Å—Ç–∏
      stream: false, // üöÄ –ë–µ–∑ —Å—Ç—Ä–∏–º–∏–Ω–≥–∞ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã
    });
    const gptTime = Date.now() - gptStart;
    console.log(`ü§ñ [${sessionId}] GPT –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω –∑–∞ ${gptTime}ms`);

    const botResponse = completion.choices[0].message.content.trim();

    // üìù –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é
    addMessageToSession(sessionId, 'assistant', botResponse);

    const totalTime = Date.now() - startTime;
    console.log(`‚è±Ô∏è [${sessionId}] –û–±—â–µ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: ${totalTime}ms`);
    console.log(`üìä [${sessionId}] –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${sessions.size}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
    res.json({
      response: botResponse,
      transcription: transcription.trim(),
      sessionId: sessionId,
      messageCount: session.messages.length,
      tokens: {
        prompt: completion.usage.prompt_tokens,
        completion: completion.usage.completion_tokens,
        total: completion.usage.total_tokens
      },
      timing: {
        transcription: transcriptionTime,
        gpt: gptTime,
        total: totalTime
      }
    });

  } catch (error) {
    const totalTime = Date.now() - startTime;
    console.error(`‚ùå [${sessionId || 'unknown'}] –û—à–∏–±–∫–∞ –∑–∞ ${totalTime}ms:`, error.message);
    
    // –î–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ OpenAI
    if (error.code === 'insufficient_quota') {
      return res.status(402).json({ 
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç OpenAI API',
        sessionId: sessionId 
      });
    }
    
    if (error.code === 'invalid_api_key') {
      return res.status(401).json({ 
        error: '–ù–µ–≤–µ—Ä–Ω—ã–π API –∫–ª—é—á OpenAI',
        sessionId: sessionId 
      });
    }
    
    if (error.status === 413) {
      return res.status(413).json({ 
        error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –¥–ª—è Whisper',
        sessionId: sessionId 
      });
    }
    
    if (error.code === 'rate_limit_exceeded') {
      return res.status(429).json({ 
        error: '–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
        sessionId: sessionId 
      });
    }

    res.status(500).json({ 
      error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ',
      sessionId: sessionId,
      timing: { total: totalTime }
    });
  }
};

// üîç –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const getSessionInfo = async (req, res) => {
  const { sessionId } = req.params;
  
  if (!sessions.has(sessionId)) {
    return res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
  
  const session = sessions.get(sessionId);
  res.json({
    sessionId: session.sessionId,
    messageCount: session.messages.length,
    createdAt: new Date(session.createdAt).toISOString(),
    lastActivity: new Date(session.lastActivity).toISOString(),
    messages: session.messages.map(msg => ({
      role: msg.role,
      contentLength: msg.content.length,
      timestamp: new Date(msg.timestamp).toISOString()
    }))
  });
};

// üóëÔ∏è –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–∏ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const clearSession = async (req, res) => {
  const { sessionId } = req.params;
  
  if (sessions.has(sessionId)) {
    sessions.delete(sessionId);
    res.json({ message: `–°–µ—Å—Å–∏—è ${sessionId} —É–¥–∞–ª–µ–Ω–∞` });
  } else {
    res.status(404).json({ error: '–°–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
  }
};

// üìä –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
export const getStats = async (req, res) => {
  const stats = {
    totalSessions: sessions.size,
    sessions: []
  };
  
  for (const [sessionId, session] of sessions.entries()) {
    stats.sessions.push({
      sessionId,
      messageCount: session.messages.length,
      lastActivity: new Date(session.lastActivity).toISOString(),
      ageMinutes: Math.round((Date.now() - session.createdAt) / 60000)
    });
  }
  
  res.json(stats);
};