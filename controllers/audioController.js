import { File } from 'node:buffer';
globalThis.File = File;
import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { OpenAI } from 'openai';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

export const transcribeAndRespond = async (req, res) => {
  try {
    // ‚úÖ –ù–û–í–û–ï - –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–∞–π–ª–∞
    if (!req.file) {
      return res.status(400).json({ error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });

    const audioPath = path.join(__dirname, '..', req.file.path);

    // üîä –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –∞—É–¥–∏–æ
    const transcription = await openai.audio.transcriptions.create({
      file: fs.createReadStream(audioPath),
      model: 'whisper-1',
    });

    // ‚úÖ –ù–û–í–û–ï - –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ –∏–∑ —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏
    const summaryPrompt = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∫–∞–∑–∞–ª: "${transcription.text}"

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è) —Ç–æ–≥–æ, –æ —á–µ–º —Å–ø—Ä–æ—Å–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å. –†–µ–∑—é–º–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–Ω—è—Ç–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.`;

    const summaryCompletion = await openai.chat.completions.create({
      messages: [
        { role: 'system', content: '–¢—ã —Å–æ–∑–¥–∞–µ—à—å –∫—Ä–∞—Ç–∫–∏–µ —Ä–µ–∑—é–º–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ä–µ–∑—é–º–µ, –±–µ–∑ –ª–∏—à–Ω–∏—Ö —Å–ª–æ–≤.' },
        { role: 'user', content: summaryPrompt }
      ],
      model: 'gpt-4',
      max_tokens: 100, // ‚úÖ –ù–û–í–û–ï - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ä–µ–∑—é–º–µ
    });

    // üí¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ ChatGPT (–æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç)
    const completion = await openai.chat.completions.create({
      messages: [
        { role: 'system', content: '–¢—ã ‚Äî –≤–µ–∂–ª–∏–≤—ã–π –≥–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫ –∞–≥–µ–Ω—Ç—Å—Ç–≤–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.' },
        { role: 'user', content: transcription.text }
      ],
      model: 'gpt-4',
    });

    // üßπ –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    fs.unlink(audioPath, (err) => {
      if (err) console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
    });

    // ‚úÖ –ù–û–í–û–ï - –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–µ–π –∏ —Ä–µ–∑—é–º–µ
    res.json({ 
      response: completion.choices[0].message.content,
      transcription: transcription.text, // ‚úÖ –ù–û–í–û–ï - –ü–æ–ª–Ω–∞—è —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—è
      summary: summaryCompletion.choices[0].message.content.trim() // ‚úÖ –ù–û–í–û–ï - –ö—Ä–∞—Ç–∫–æ–µ —Ä–µ–∑—é–º–µ
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ:', error.message);
    
    // ‚úÖ –ù–û–í–û–ï - –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    if (error.code === 'ENOENT') {
      res.status(404).json({ error: '–ê—É–¥–∏–æ —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
    } else if (error.response?.status === 401) {
      res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ OpenAI API' });
    } else {
      res.status(500).json({ error: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∞—É–¥–∏–æ' });
    }
  }
};