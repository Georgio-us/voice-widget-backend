// routes/audioRoute.js
import express from 'express';
import multer from 'multer';
import {
  transcribeAndRespond,
  getSessionInfo,
  clearSession,
  getStats
} from '../controllers/audioController.js';

const router = express.Router();

// üöÄ Memory storage –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
const storage = multer.memoryStorage();
const upload = multer({
  storage,
  limits: {
    fileSize: 25 * 1024 * 1024, // 25MB (–ª–∏–º–∏—Ç Whisper API)
    files: 1,
    fieldSize: 25 * 1024 * 1024
  },
  fileFilter: (req, file, cb) => {
    const allowedTypes = [
      'audio/wav', 'audio/mp3', 'audio/mpeg', 'audio/mp4', 'audio/m4a',
      'audio/webm', 'audio/ogg', 'audio/flac', 'audio/x-wav'
    ];
    if (allowedTypes.includes(file.mimetype)) {
      cb(null, true);
    } else {
      cb(new Error('UNSUPPORTED_FORMAT'), false);
    }
  }
});

// üîß –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ Multer
const handleMulterError = (err, req, res, next) => {
  if (err instanceof multer.MulterError) {
    console.error('Multer –æ—à–∏–±–∫–∞:', err.code);
    switch (err.code) {
      case 'LIMIT_FILE_SIZE':
        return res.status(413).json({ error: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º—É–º 25MB.' });
      case 'LIMIT_FILE_COUNT':
        return res.status(400).json({ error: '–ú–æ–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ñ–∞–π–ª.' });
      case 'LIMIT_UNEXPECTED_FILE':
        return res.status(400).json({ error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –ø–æ–ª–µ —Ñ–∞–π–ª–∞.' });
      default:
        return res.status(400).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞.' });
    }
  }
  if (err.message === 'UNSUPPORTED_FORMAT') {
    return res.status(400).json({
      error: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: MP3, WAV, M4A, WebM, OGG, FLAC',
      supportedFormats: ['mp3', 'wav', 'm4a', 'webm', 'ogg', 'flac']
    });
  }
  next(err);
};

// üõ°Ô∏è –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const validateInput = (req, res, next) => {
  // –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
  if (req.body.text) {
    if (typeof req.body.text !== 'string') {
      return res.status(400).json({ 
        error: '–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π',
        code: 'INVALID_TEXT_TYPE'
      });
    }
    
    if (req.body.text.length > 2000) {
      return res.status(400).json({ 
        error: '–¢–µ–∫—Å—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2000 —Å–∏–º–≤–æ–ª–æ–≤)',
        code: 'TEXT_TOO_LONG',
        maxLength: 2000,
        currentLength: req.body.text.length
      });
    }
    
    if (req.body.text.trim().length === 0) {
      return res.status(400).json({ 
        error: '–¢–µ–∫—Å—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º',
        code: 'EMPTY_TEXT'
      });
    }
  }

  // –í–∞–ª–∏–¥–∞—Ü–∏—è sessionId (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
  if (req.body.sessionId) {
    if (typeof req.body.sessionId !== 'string') {
      return res.status(400).json({ 
        error: 'SessionId –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π',
        code: 'INVALID_SESSION_TYPE'
      });
    }
    
    if (!/^user_\d+_[a-z0-9]+$/.test(req.body.sessionId)) {
      return res.status(400).json({ 
        error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç sessionId',
        code: 'INVALID_SESSION_FORMAT'
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ª–∏–±–æ –∞—É–¥–∏–æ, –ª–∏–±–æ —Ç–µ–∫—Å—Ç–∞
  if (!req.file && !req.body.text) {
    return res.status(400).json({ 
      error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ—Ñ–∞–π–ª –∏–ª–∏ —Ç–µ–∫—Å—Ç',
      code: 'NO_INPUT_PROVIDED'
    });
  }

  console.log(`‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ–π–¥–µ–Ω–∞ –¥–ª—è session: ${req.body.sessionId?.slice(-8) || 'new'}`);
  next();
};

// üîç –õ–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
const logFileInfo = (req, res, next) => {
  if (req.file) {
    const sizeKB = (req.file.size / 1024).toFixed(1);
    const sessionId = req.body.sessionId || 'new';
    console.log(`üìé [${sessionId}] –ó–∞–≥—Ä—É–∂–µ–Ω —Ñ–∞–π–ª: ${req.file.originalname} (${sizeKB}KB, ${req.file.mimetype})`);
  }
  next();
};

// üé§ –ì–ª–∞–≤–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç: –∞—É–¥–∏–æ + –æ–±—Ä–∞–±–æ—Ç–∫–∞
router.post('/upload',
  upload.single('audio'),
  handleMulterError,
  validateInput, // ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–∞ –≤–∞–ª–∏–¥–∞—Ü–∏—è
  logFileInfo,
  transcribeAndRespond
);

// üìå –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Å—Å–∏–∏
router.get('/session/:sessionId', getSessionInfo);

// üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Å–µ—Å—Å–∏—é
router.delete('/session/:sessionId', clearSession);

// üìà –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—Å–µ—Ö —Å–µ—Å—Å–∏–π
router.get('/stats', getStats);

// üìã –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –∏ —Ñ–∏—á–∏
router.get('/formats', (req, res) => {
  res.json({
    supportedFormats: ['mp3', 'wav', 'm4a', 'webm', 'ogg', 'flac'],
    maxFileSize: '25MB',
    whisperModel: 'whisper-1',
    gptModel: 'gpt-4o-mini',
    features: [
      '–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∏',
      'Memory storage',
      '–ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ —Å–µ—Å—Å–∏–π',
      '–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ (–∏–º—è, —Ä–∞–π–æ–Ω, –±—é–¥–∂–µ—Ç...)',
      '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Å—Å–∏–π',
      '–í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö' // ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ
    ]
  });
});

// üß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ API
router.get('/health', (req, res) => {
  res.json({
    status: 'OK',
    service: 'Voice Widget Audio API',
    version: '2.1.0', // ‚Üê –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≤–µ—Ä—Å–∏—è
    timestamp: new Date().toISOString(),
    endpoints: {
      upload: 'POST /api/audio/upload',
      formats: 'GET /api/audio/formats',
      session: 'GET /api/audio/session/:sessionId',
      clearSession: 'DELETE /api/audio/session/:sessionId',
      stats: 'GET /api/audio/stats'
    },
    optimizations: [
      'Memory storage',
      'Session context',
      'GPT-4o-mini',
      'No token limits',
      'Single OpenAI instance',
      'Input validation' // ‚Üê –î–æ–±–∞–≤–ª–µ–Ω–æ
    ]
  });
});

export default router;